# **Finding Lane Lines on the Road** 
---

**Finding Lane Lines on the Road**

The goals / steps of this project are the following:
* Make a pipeline that finds lane lines on the road
* Reflect on your work in a written report

[//]: # (Image References)

[image1]: ./examples/grayscale.jpg "Grayscale"

---

### Reflection

### 1. Describe your pipeline. As part of the description, explain how you modified the draw_lines() function.

My pipeline consisted of 5 steps.
Step1: I convert the image to a greyscale image to analyze
Step2: I do some noise manipulation to make it easier to identify the color changes, i.e. the lane lines in the image
Step3: I do a canny edge detection to identify the pixels that make up the edges where the image is white and make the rest black
Step4: I then connect the remaining dots left in the image from edge detect to make up lines that where "whiteish" in the grayscale
Step5: Next I use remove everything that is not of interest in the Hough Line Image with a region selection algorithm
Step6:  Finally, I recombine the identified lane lines with the original image to get the image with lane lines detected.


![alt text][image1]


### 2. Identify potential shortcomings with your current pipeline


One potential shortcoming with my pipeline is that the lines generated by the pipeline do not always lay right on top of the lane lines.  This will give more lane room then there actually is available.  Another shortcoming with my pipeline is that the pipeline will not be able to detect lines that curve, i.e. lane lines that run in one direction on the image and then curve around and change direction.



### 3. Suggest possible improvements to your pipeline

There are several possible improvements that can be made to my code to enhance the capabilities of the code to detect lane lines.  The first would be to correct the lane generation code to produce lane lines that lay more directly on top of the acutal lane lines in the image.  This can probably be accomplished with threshold changes in the code and modifications to how the lines are generated.  Another improvement to the pipeline would be to incorporate code to detect and generate curved lane lines.  In order to include this functionality into my code I will have to modify the region of interest to be more of a polygon selection region, which will allow me to collect curves in addition to straight lane lines. I will also have to modify the algorithm that calculates the Hough Image to account for curve lane lines.  Presently, the sign on the slope of the line created from the canny edge detection determines whether the lane created will be a left or right lane line.  Also the code to create the extrapolated line itself it also a straight line.  I will probably have to convert the code to handle a polynomial line generation for the lane line.  The last modification that could be made to the lane detection code is to provide a better filtering code for the grayscale that will pick up lane lines on a surface that is very close in color to lane lines.  For example modifying the code to detect lane lines when a slight layer of snow is on the road.